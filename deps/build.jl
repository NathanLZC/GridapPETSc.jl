const_jl = joinpath(@__DIR__, "..", "src", "const.jl")

if isfile(const_jl)
  include(const_jl)
end


PETSC_FOUND = true
PETSC_DIR   = haskey(ENV,"PETSC_DIR") ? ENV["PETSC_DIR"] : "/usr/lib/petsc"
PETSC_ARCH  = haskey(ENV,"PETSC_ARCH") ? ENV["PETSC_ARCH"] : ""

PETSC_LIB             = nothing
PETSC_LIB_DIR         = nothing
PETSC_INCLUDE_DIR     = nothing
PETSC_HEADER          = nothing
PETSC_SCALAR_DATATYPE = Float64
PETSC_REAL_DATATYPE   = Float64
PETSC_INT_DATATYPE    = Int32

# Check PETSC_DIR exists
if isdir(PETSC_DIR)
    @info "PETSc directory found at: $PETSC_DIR"

    # Define default paths
    PETSC_LIB_DIR = joinpath(PETSC_DIR,PETSC_ARCH,"lib")
    PETSC_INCLUDE_DIR = joinpath(PETSC_DIR,PETSC_ARCH,"include")
    PETSC_HEADER = joinpath(PETSC_INCLUDE_DIR,"petsc.h")

    # Check PETSC_LIB_DIR (.../lib directory) exists
    if isdir(PETSC_LIB_DIR)
        @info "PETSc lib directory found at: $PETSC_LIB_DIR"
    else
        PETSC_FOUND = false
        @warn "PETSc lib directory not found: $PETSC_LIB_DIR"
    end

    # Check PETSC_LIB (.../libpetsc.so or .../libpetsc_real.so file) exists
    if isfile(joinpath(PETSC_LIB_DIR,"libpetsc.so"))
        PETSC_LIB = joinpath(PETSC_LIB_DIR,"libpetsc.so")
        @info "PETSc library found at: $PETSC_LIB"
    elseif isfile(joinpath(PETSC_LIB_DIR,"libpetsc_real.so"))
        PETSC_LIB = joinpath(PETSC_LIB_DIR,"libpetsc_real.so")
        @info "PETSc library found at: $PETSC_LIB"
    else
        PETSC_FOUND = false
        @warn "PETSc lib not found at: $PETSC_LIB_DIR"
    end

    # Check PETSC_INCLUDE_DIR (.../include directory) exists
    if isdir(PETSC_INCLUDE_DIR)
        @info "PETSc include directory found at: $PETSC_INCLUDE_DIR"
    else
        @warn "PETSc include directory not found: $PETSC_INCLUDE_DIR"
    end

    # Check PETSC_HEADER (.../petsc.h file) exists
    if isfile(PETSC_HEADER)
        @info "PETSc header found at: $PETSC_HEADER"
    else
        @warn "PETSc header not found at: $PETSC_INCLUDE_DIR"
    end

    # Detect PETSc base data types
    if !(PETSC_LIB === nothing) && isfile(PETSC_LIB)
        const PETSC = PETSC_LIB

        # Returns PETSc data type given a string
        function PetscDataTypeFromString(name::AbstractString)
            ptype = Vector{Cint}(undef,1)
            found = Vector{UInt32}(undef,1)
            ccall( (:PetscDataTypeFromString, PETSC),
                Cint,
                    (Cstring,
                    Ptr{Cint},
                    Ptr{UInt32}),
                name, ptype, found)
            return ptype[1], convert(Bool, found[1])
        end

        # Returns PETSc data size given its enumerator
        function PetscDataTypeGetSize(dtype::Cint)
            datasize = Vector{Csize_t}(undef,1)
            ccall( (:PetscDataTypeGetSize, PETSC),
                Cint,
                    (Cint,
                    Ptr{Csize_t}),
                dtype, datasize)
            return datasize[1]
        end

        # Define types that depend on the options PETSc was compiled with
        (petsc_real_data_type, found_real)     = PetscDataTypeFromString("Real")
        (petsc_scalar_data_type, found_scalar) = PetscDataTypeFromString("Scalar")
        petsc_int_size                         = PetscDataTypeGetSize(PETSC_INT)

        @assert(found_real & found_scalar)

        petsc_scalar_data_type != petsc_real_data_type && throw(ErrorException("[ERROR] Only Real PetscScalar type is supported"))

        # Figure out equivalent Julia types for PETSc
        if petsc_real_data_type == PETSC_DOUBLE
            PETSC_SCALAR_DATATYPE = PETSC_REAL_DATATYPE = Float64
        elseif petsc_real_data_type == PETSC_FLOAT
            PETSC_SCALAR_DATATYPE = PETSC_REAL_DATATYPE = Float32
        else
            @warn "Unknown type of Real. Petsc real data type is $petsc_real_data_type"
            throw(ErrorException("Unsupported PetscReal type"))
        end

        if petsc_int_size == 4
            PETSC_INT_DATATYPE = Int32
        elseif petsc_int_size == 8
            PETSC_INT_DATATYPE = Int64
        else
            @warn "Unknown Int size. Int size is $petsc_int_size"
            throw(ErrorException("Unsupported integer size"))
        end

    end

else
    PETSC_FOUND = false
    @warn "PETSc directory not found: $PETSC_DIR"
end

# Write PETSc configuration to deps.jl file
deps_jl = "deps.jl"

if isfile(deps_jl)
  rm(deps_jl)
end

open(deps_jl,"w") do f
  println(f, "# This file is automatically generated")
  println(f, "# Do not edit")
  println(f)
  println(f, :(const PETSC_FOUND           = $PETSC_FOUND))
  println(f, :(const PETSC_DIR             = $PETSC_DIR))
  println(f, :(const PETSC_ARCH            = $PETSC_ARCH))
  println(f, :(const PETSC_LIB_DIR         = $PETSC_LIB_DIR))
  println(f, :(const PETSC_INCLUDE_DIR     = $PETSC_INCLUDE_DIR))
  println(f, :(const PETSC_LIB             = $PETSC_LIB))
  println(f, :(const PETSC_HEADER          = $PETSC_HEADER))
  println(f, :(const PETSC_SCALAR_DATATYPE = $PETSC_SCALAR_DATATYPE))
  println(f, :(const PETSC_REAL_DATATYPE   = $PETSC_REAL_DATATYPE))
  println(f, :(const PETSC_INT_DATATYPE    = $PETSC_INT_DATATYPE))
end

@info """
PETSc configuration:
==============================================
  - PETSC_FOUND           = $PETSC_FOUND
  - PETSC_DIR             = $PETSC_DIR
  - PETSC_ARCH            = $PETSC_ARCH
  - PETSC_LIB_DIR         = $PETSC_LIB_DIR
  - PETSC_INCLUDE_DIR     = $PETSC_INCLUDE_DIR
  - PETSC_LIB             = $PETSC_LIB
  - PETSC_HEADER          = $PETSC_HEADER
  - PETSC_SCALAR_DATATYPE = $PETSC_SCALAR_DATATYPE
  - PETSC_REAL_DATATYPE   = $PETSC_REAL_DATATYPE
  - PETSC_INT_DATATYPE    = $PETSC_INT_DATATYPE
"""
